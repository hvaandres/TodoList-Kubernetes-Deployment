name: OSV-Scanner with Scout SBOM Indexer

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  # Require writing security events to upload SARIF file to security tab
  security-events: write
  # Read commit contents
  contents: read

jobs:
  scan-pr:
    if: ${{ github.event_name == 'pull_request' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      scan-args: |-
        -r
        --skip-git
        ./

  generate-sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Generate SBOM using Syft Docker image
        run: |
          docker run --rm -v $(pwd):/workspace ghcr.io/anchore/syft:latest sbom /workspace --output cyclonedx-json /workspace/sbom.json

  index-sbom:
    runs-on: ubuntu-latest
    needs: generate-sbom
    steps:
      - name: Generate SBOM Index using Scout SBOM Indexer
        run: |
          docker run --rm -v $(pwd):/workspace docker/scout-sbom-indexer:latest index /workspace/sbom.json --output /workspace/indexed-sbom.json

  parse-sbom:
    runs-on: ubuntu-latest
    needs: index-sbom
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Parse Indexed SBOM for Critical Vulnerabilities
        id: parse_sbom
        run: |
          critical_vulns=$(jq '[.components[] | select(.vulnerabilities | length > 0) | select(.vulnerabilities[] | .severity == "critical")] | length' /workspace/indexed-sbom.json)
          echo "Critical vulnerabilities count: $critical_vulns"
          echo "::set-output name=critical::$critical_vulns"

      - name: Fail PR if Critical Vulnerabilities are Found
        if: steps.parse_sbom.outputs.critical != '0'
        run: |
          echo "Critical vulnerabilities found in Indexed SBOM!"
          exit 1
