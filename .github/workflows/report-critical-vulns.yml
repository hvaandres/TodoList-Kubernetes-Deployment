name: OSV-Scanner

on:
  pull_request:
    branches: [ "master" ]
  merge_group:
    branches: [ "master" ]
  schedule:
    - cron: '22 23 * * 4'
  push:
    branches: [ "master" ]

permissions:
  security-events: write
  contents: read

jobs:
  scan-scheduled:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      scan-args: |-
        -r
        --skip-git
        ./
  scan-pr:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      scan-args: |-
        -r
        --skip-git
        ./
  run-osv-scanner:
    name: Run OSV-Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run OSV-Scanner Docker image
        run: |
          docker run --name ghcriogoogleosvscanneractionv171_676f36 \
            --label a1049c \
            --workdir /github/workspace \
            --rm \
            -e INPUT_SCAN-ARGS \
            -e HOME \
            -e GITHUB_JOB \
            -e GITHUB_REF \
            -e GITHUB_SHA \
            -e GITHUB_REPOSITORY \
            -e GITHUB_REPOSITORY_OWNER \
            -e GITHUB_REPOSITORY_OWNER_ID \
            -e GITHUB_RUN_ID \
            -e GITHUB_RUN_NUMBER \
            -e GITHUB_RETENTION_DAYS \
            -e GITHUB_RUN_ATTEMPT \
            -e GITHUB_REPOSITORY_ID \
            -e GITHUB_ACTOR_ID \
            -e GITHUB_ACTOR \
            -e GITHUB_TRIGGERING_ACTOR \
            -e GITHUB_WORKFLOW \
            -e GITHUB_HEAD_REF \
            -e GITHUB_BASE_REF \
            -e GITHUB_EVENT_NAME \
            -e GITHUB_SERVER_URL \
            -e GITHUB_API_URL \
            -e GITHUB_GRAPHQL_URL \
            -e GITHUB_REF_NAME \
            -e GITHUB_REF_PROTECTED \
            -e GITHUB_REF_TYPE \
            -e GITHUB_WORKFLOW_REF \
            -e GITHUB_WORKFLOW_SHA \
            -e GITHUB_WORKSPACE \
            -e GITHUB_ACTION \
            -e GITHUB_EVENT_PATH \
            -e GITHUB_ACTION_REPOSITORY \
            -e GITHUB_ACTION_REF \
            -e GITHUB_PATH \
            -e GITHUB_ENV \
            -e GITHUB_STEP_SUMMARY \
            -e GITHUB_STATE \
            -e GITHUB_OUTPUT \
            -e RUNNER_OS \
            -e RUNNER_ARCH \
            -e RUNNER_NAME \
            -e RUNNER_ENVIRONMENT \
            -e RUNNER_TOOL_CACHE \
            -e RUNNER_TEMP \
            -e RUNNER_WORKSPACE \
            -e ACTIONS_RUNTIME_URL \
            -e ACTIONS_RUNTIME_TOKEN \
            -e ACTIONS_CACHE_URL \
            -e ACTIONS_RESULTS_URL \
            -e GITHUB_ACTIONS=true \
            -e CI=true \
            --entrypoint "/root/osv-reporter" \
            -v "/var/run/docker.sock:/var/run/docker.sock" \
            -v "/home/runner/work/_temp/_github_home:/github/home" \
            -v "/home/runner/work/_temp/_github_workflow:/github/workflow" \
            -v "/home/runner/work/_temp/_runner_file_commands:/github/file_commands" \
            -v "/home/runner/work/TodoList-Kubernetes-Deployment/TodoList-Kubernetes-Deployment:/github/workspace" \
            ghcr.io/google/osv-scanner-action:v1.7.1 \
            --new=results.json \
            --output=results.sarif \
            --gh-annotations=false
      - name: Upload SARIF results
        uses: actions/upload-artifact@v3
        with:
          name: sarif-results
          path: results.sarif

      - name: Review and Filter Scan Results
        run: |
          # Install the required SARIF tooling
          sudo apt-get install -y sarif-tools

          # Output the original SARIF results for debugging
          echo "Original SARIF results:"
          cat results.sarif

          # Process SARIF results to filter out only critical vulnerabilities
          mkdir -p filtered-results
          sarif-filter --input results.sarif --output filtered-results/critical-results.sarif --severity critical

          # Output the filtered results for debugging
          echo "Filtered SARIF results (Critical only):"
          cat filtered-results/critical-results.sarif

          # Check if critical vulnerabilities exist and fail the pipeline if they do
          if grep -q '"severity": "critical"' filtered-results/critical-results.sarif; then
            echo "Critical vulnerabilities found. Failing the pipeline."
            exit 1
          else
            echo "No critical vulnerabilities found."
          fi
